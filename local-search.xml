<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>论文解读——Denoising Diffusion Probability Model原理与代码分析</title>
    <link href="/blog/2023/12/21/2023/12/21/DDPM/"/>
    <url>/blog/2023/12/21/2023/12/21/DDPM/</url>
    
    <content type="html"><![CDATA[<h1 id="论文解读——Denoising-Diffusion-Probability-Model原理与代码分析"><a href="#论文解读——Denoising-Diffusion-Probability-Model原理与代码分析" class="headerlink" title="论文解读——Denoising Diffusion Probability Model原理与代码分析"></a>论文解读——Denoising Diffusion Probability Model原理与代码分析</h1><p><code>neurips2020</code></p><blockquote><p>摘要：使用扩散模型生成高质量图像，扩散概率模型和朗之万动力学的去噪分数匹配之间的联系设计的加权变分界进行训练来获得最佳结果，在学术界被认为是最早的扩散模型，尽管2015年Jascha Sohl-Dickstein等人已经提出了扩散概率模型。</p><p>论文主要贡献：</p><p>1.作者证明了扩散模型能够生成高质量图像样本。</p><p>2.在假设马尔可夫过程的前提下，作者发现了扩散模型 与变分推理之间的联系，使得可以训练一个优秀的神经网络来生成高质量样本。</p></blockquote><h2 id="DDPM原理"><a href="#DDPM原理" class="headerlink" title="DDPM原理"></a>DDPM原理</h2><p>扩散模型（Diffusion Model）是一种基于物理热力学扩散思想的深度学习生成模型，包括前向扩散和反向扩散两个过程。不太懂的朋友，不妨想象一下，一滴墨水滴入盛满水的杯中逐渐扩散到整个系统的情景。非平衡热力学描述这滴墨水随时间推移的扩散过程中每一个“时间步”状态的概率分布——从一个初始的复杂概率分布逐步扩散变成简单均匀的分布。如果可以反向求出这个过程，那么就可以从简单分布中推导复杂分布。说起扩散模型，甚至可以追溯一下它的前辈——VAE（变分自编码器）和GAN（生成对抗网络），不过这不在本文的讨论范围。</p><p>公认最早的扩散模型DDPM（Denoising Diffusion Probabilistic Model），假设了扩散过程是一个马尔可夫过程（每一个时间步的状态仅有上一个时间步状态的概率分布加上当前时间步的高斯噪声得到），以及扩散过程的逆过程是高斯分布等。</p><p>DDPM的收敛速度与马尔可夫时间步长和样本空间大小（resolution和sample size）成正比。在DDPM中，逆向过程近似于前向过程中添加的高斯噪声；需要迭代所有数千个时间步才能生成一个样本批次。</p><img src="/blog/2023/12/21/2023/12/21/DDPM/DDPM.png" class=""><p>如图1所示，$x_0$到$x_T$是对数据进行加噪的前向过程，DDPM假设了扩散过程是一个马尔可夫过程（每一个时间步的概率分布仅由上一个时间步状态的概率分布加上当前时间步的高斯噪声得到）。时间步$t-1$到时间步$t$的单步加噪过程的数学表达式如下：<br>$$<br>q(x_t|x_{t-1})&#x3D;\mathcal{N}(x_t; \sqrt{1-\beta_t}x_{t-1}, \beta_tI)<br>$$</p><p>噪声的方差是一个位于区间$(0,1)$的固定值$\beta_t$确定，均值则由固定值$\beta_t$和当前时刻“带噪”的数据分布确定。</p><p>最终的噪声分布数学表达式如下：<br>$$<br>q(x_{1:T}|x_0)&#x3D;\prod_{t&#x3D;1}^{T}q(x_t|x_{t-1})<br>$$</p><p>设 $\alpha_t:&#x3D;1-\beta_t$，$\bar{\alpha}_{t}:&#x3D;\prod_{s&#x3D;1}^{t}\alpha_s$，则有：<br>$$<br>q(x_t|x_0)&#x3D;\mathcal{N}(x_t;\sqrt{\bar{\alpha}_t}x_0,(1-\bar{\alpha}_t)I)<br>$$</p><p>$x_t$的公式则为：<br>$$<br>x_t(x_0,\epsilon)&#x3D;\sqrt{\bar{\alpha}_t}x_0+\sqrt{1-\bar{\alpha}_t}\epsilon<br>$$</p><p>前向过程是将数据噪声化的过程，前向过程的逆过程（反向过程）则是“去噪”的过程，即从随机噪声中迭代恢复出清晰数据的过程。DDPM将反向过程也视为一个马尔可夫链，这个马尔科夫链是由一系列神经网络参数化的高斯分布组成，也就是需要训练的扩散模型UNet。</p><p>从时间步$t$到时间步$t-1$的单步反向“去噪”过程的数学表达式如下：<br>$$<br>p(x_{t-1}|x_t,x_0)&#x3D;\mathcal{N}(x_{t-1};\tilde{\mu}(x_t,x_0),\tilde{\beta}_tI)<br>$$</p><p>UNet网络学习到的weights和bias就是反向过程的均值与方差（假设方差不固定需要学习，DDPM论文中固定了方差但在后续论文的改进中将其变为了可学习的参数），这涉及到了重参数化的思想，在这里简单介绍一下：</p><p>正如 $p(x_{t-1}|x_t,x_0)$所示 ，我们要知道反向过程估计的复杂高斯分布$\mathcal{N}(x;\mu,\sigma)$ 的均值与方差，并在该分布下进行采样，而这样的采样是无法被神经网络所学习的。于是我们从简单高斯分布 $\mathcal{N}(x;0,1)$采样 $z$ ，假设参数 $w$和 $b$ 使得 $\mu$ 与 $\sigma$可以通过UNet网络对$w$ 和 $b$的学习来得到，这样随机性就只存在于$\mathcal{N}(x;0,1)$中，即：<br>$$<br>\mathcal{N}(x;\mu,\sigma)&#x3D;w*\mathcal{N}(x;0,1)+b<br>$$</p><p>这就是<code>重参数化</code>，不过DDPM中固定了方差不变，只学习均值。</p><p>正是因为反向过程的每一步都是参数化的高斯分布，因此可以分别求高斯分布的均值和方差。通过推导，可以得到时间步$t-1$的高斯分布$q(x_{t-1}|x_t,x_0)$的均值与方差的数学表达式：<br>$$<br>\tilde{\beta}_t&#x3D;\frac{1-\bar{\alpha}_{t-1}}{1-\bar{\alpha}_t}·\beta_t<br>$$</p><p>$$<br>\tilde{\mu}(x_t,x_0)&#x3D;\frac{\sqrt\alpha_t(1-\bar{\alpha}_{t-1})}{1-\bar{\alpha}<em>t}x_t+\frac{\sqrt{\bar{\alpha}</em>{t-1}}\beta_t}{1-\bar{\alpha}_t}x_0<br>$$</p><p>则$x_{t-1}$的公式：<br>$$<br>x_{t-1}&#x3D;\frac{1}{\sqrt{\alpha}_t}(x_t-\frac{\beta_t}{\sqrt{1-\bar{\alpha}_t}}\epsilon)<br>$$</p><p>扩散模型的优化目标数学表达式：<br>$$<br>L^{simple}_{t-1}&#x3D;E_{x_0,\epsilon\sim\mathcal{N}(0,I)}[||\epsilon-\epsilon_\theta(x_t,t)||^2]<br>$$</p><p>在DDIM论文中损失做了一些调整（如下）。现在的扩散模型几乎都采用了DDIM提出了新的采样方式（而非像DDPM一样的马尔可夫过程每一步的采样都依赖上一步的结果），这样的好处是大大提高了采样的效率，之后可能会写一篇关于DDIM的分析。<br>$$<br>\mathcal{L}_{final}&#x3D;\mathcal{L}_{mse}+\lambda\mathcal{L}_{vlb}<br>$$</p><h2 id="扩散过程"><a href="#扩散过程" class="headerlink" title="扩散过程"></a>扩散过程</h2><img src="/blog/2023/12/21/2023/12/21/DDPM/DDPM1.jpg" class=""><p>一个简单的扩散模型工作的示意图，将输入数据$Z$不断添加高斯噪声，即Diffusion Process来生成带噪数据$Z_T$，之后通过U-Net网络。</p><p>使用U-Net网络你有两种选择，一种是直接预测最后的结果，一种是进行噪声的预测（Diffusers库中实现通过对噪声预测）。在实践验证中，DDPM选择了对噪声的预测，此后的研究均是通过UNet预测噪声来优化网络参数。</p><img src="/blog/2023/12/21/2023/12/21/DDPM/DDPM2.jpg" class=""><p>Algorithm 1展示了完整的训练优化过程，损失经过简化变成一个简单的均方损失函数。Algorithm 2中第4行公式$\epsilon$代表预测噪声，反向过程（马尔科夫过程）需要逐步去噪，$\alpha_t$是时间步调度器（与时间步设置有关），其次是一个$\sigma_tz$，是因为DDPM中每次在去噪后的图像上会再加入一点噪声来增加生成的多样性。</p><p>简单实现扩散模型的训练过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> UNet2DModel<br><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> DDPMScheduler<br><span class="hljs-keyword">import</span> torch<br><br><span class="hljs-comment"># create model</span><br>model = UNet2DModel(<br>    sample_size=image_size,<br>    in_channels=<span class="hljs-number">3</span>,<br>    out_channels=<span class="hljs-number">3</span>,<br>    layers_per_block=<span class="hljs-number">2</span>,<br>    block_out_channels=(<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">256</span>),<br>    down_block_types=(<br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;DownBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;AttnDownBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;AttnDownBlock2D&quot;</span>,<br>    ),<br>    up_block_types=(<br>        <span class="hljs-string">&quot;AttnUpBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;AttnUpBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,<br>        <span class="hljs-string">&quot;UpBlock2D&quot;</span>,<br>    ),<br>)<br>model.to(device)<br><br><span class="hljs-comment"># 设定噪声调度器</span><br>noise_scheduler = DDPMScheduler(<br>    num_train_timesteps=<span class="hljs-number">1000</span>,<br>    beta_schedule=<span class="hljs-string">&quot;squaredcos_cap_v2&quot;</span>,<br>)<br><br><span class="hljs-comment"># 训练循环</span><br>optimizer = torch.optim.AdamW(model.parameters(), lr=<span class="hljs-number">4e-4</span>)<br><br>losses = []<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):<br>        clean_images = batch[<span class="hljs-string">&quot;images&quot;</span>].to(device)<br>        <span class="hljs-comment"># add noisy for image</span><br>        noise = torch.randn(clean_images.shape).to(clean_images.device)<br>        bs = clean_images.shape[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-comment"># select a random timestep for every image</span><br>        timesteps = torch.randint(<br>            <span class="hljs-number">0</span>, noise_scheduler.num_train_timesteps, (bs,),<br>            device=clean_images.device<br>        ).long()<br><br>        <span class="hljs-comment"># Add noise to a clear image based on the noise amplitude at each timestep</span><br>        noisy_images = noise_scheduler.add_noise(<br>            clean_images,<br>            noise,<br>            timesteps<br>        )<br><br>        <span class="hljs-comment"># obtain results</span><br>        noise_pred = model(noisy_images, timesteps, return_dict=<span class="hljs-literal">False</span>)[<span class="hljs-number">0</span>]<br><br>        <span class="hljs-comment"># compute loss</span><br>        loss = F.mse_loss(noise_pred, noise)<br>        <span class="hljs-comment"># backward</span><br>        loss.backward(loss)<br>        <br></code></pre></td></tr></table></figure><p>实验部分在CIFAR-10和CELEBA-HQ数据集上测试图像的生成能力，更详细内容可以参考原<a href="https://proceedings.neurips.cc/paper_files/paper/2020/file/4c5bcfec8584af0d967f1ab10179ca4b-Paper.pdf">论文</a>。</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
      <tag>Diffusion Model</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>论文解读——Attention is all you need（理解transformer原理及实现）</title>
    <link href="/blog/2023/12/19/2023/12/19/transformer/"/>
    <url>/blog/2023/12/19/2023/12/19/transformer/</url>
    
    <content type="html"><![CDATA[<h1 id="论文解读——Attention-is-all-you-need（理解transformer原理及实现）"><a href="#论文解读——Attention-is-all-you-need（理解transformer原理及实现）" class="headerlink" title="论文解读——Attention is all you need（理解transformer原理及实现）"></a>论文解读——Attention is all you need（理解transformer原理及实现）</h1><p><code>neurips2017</code></p><p><a href="https://proceedings.neurips.cc/paper_files/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf">论文地址</a></p><p><a href="https://github.com/Jiawei804/transformer">基于tensorflow2.x的实现</a></p><blockquote><p>摘要：本篇论文是由goole Brain在2017年发表的一篇论文，提出了一个广泛应用于自然语言处理任务的新模型，即Transformer。主要贡献 ：</p><p>1.Transformer是开创性的工作，引领了后来深度学习的发展，截止到2023年，除了在NLP领域，在其他模态下引用Transformer的思想和架构成为主流。</p><p>2.在NLP领域主导的架构是循环神经网络（RNN），Transformer摒弃了RNN的架构，实现了训练并行，提高了训练效率。</p><p>3.提出的自注意力机制（self-Attention）被广泛应用于其他网络，推动了深度学习的发展，是后来BERT、GPT等模型的基础。</p></blockquote><h2 id="Transformer究竟长什么样子？"><a href="#Transformer究竟长什么样子？" class="headerlink" title="Transformer究竟长什么样子？"></a>Transformer究竟长什么样子？</h2><p>话不多说，先上图。</p><div class="row justify-content-sm-center">    <div class="col mt-3 mt-md-0">        <img src="/blog/2023/12/19/2023/12/19/transformer/1.jpg" class="">    </div></div><p>先从宏观上介绍，Transformer一共有两部分组成，第一部分是编码器Encoder（左），第二部分是解码器Decoder（右）。位置编码（Positional Encoding）来记录位置信息，Input Embedding、Output Embedding将输入向量转化为Embedding嵌入，然后将二者加起来喂入模型，Decoder最终的输出会通过全连接层和SoftMax得到词表的概率分布，最简单的方式是选出概率最高的词作为候选词。接下来来详细聊一聊内部的设计。</p><h2 id="编码器Encoder"><a href="#编码器Encoder" class="headerlink" title="编码器Encoder"></a>编码器Encoder</h2><p>我们从Inputs一步一步梳理。</p><p>假设我们的训练集只有一句文本，首先要通过分词器tokenizer转变成词id，tokenizer有三种划分方式：分别是char-level、word-level、sub-level。目前更流行的是词根分词（sub-level）。我们假设文本通过tokenizer得到一个$(1,40)$的一个向量，这个就是准备好的Inputs。</p><p>之后，我们将Inputs输入到Embedding层（假设Embedding维度为1024），得到一个$(1,50,512)$的词嵌入向量（Embedding中会将Inputs变为one-hot编码之后做矩阵运算（1，50，vocab_size）@（vocab_size，512））。</p><img src="/blog/2023/12/19/2023/12/19/transformer/2.jpg" class=""><p>此论文中的提出的位置编码是确定的值，只与位置有关无需训练得到，pos就是词的位置（这里的词不是word而是sub），$d_{model}$是超参数，这里举例512，维度是$(50,512)$。之后我们将Position Embedding扩展一个维度与Embedding嵌入逐元素相加之后输入到Encoder。</p><img src="/blog/2023/12/19/2023/12/19/transformer/3.jpg" class=""><p>接下来，我们拿一个Encoder举例，N×代表多个Encoder叠加。Encoder的第一个模块是多头注意力（Multi-Head Attention），也是Transformer的核心。</p><h3 id="多头注意力"><a href="#多头注意力" class="headerlink" title="多头注意力"></a>多头注意力</h3><p>多头注意力是由多个缩放点积注意力（自注意力Self-Attention）组成的。</p><img src="/blog/2023/12/19/2023/12/19/transformer/4.jpg" class=""><p>多头注意力首先有三个全连接层$W_{Q}$，$W_{K}$，$W_{V}$，Encoder的输入经过这三个全连接层得到$Q、K、V$三个向量，维度都是$(1,50,512)$，之后拆分成8个缩放点积注意力，$q、k、v$维度变为$(1,8,50,64)$。然后计算Attention（公式如上$d_{k}$是$k$的最后一个维度，因为前面的层用的是$d_{model}$所以仍然是512）。每一个 Attention的维度$(1,1,50,64)$，之后再拼接起来就是$(1,8,50,64)$，之后再做维度变换变成$(1,50,512)$。之后做残差连接，然后层归一化（Add &amp; Norm）。</p><p>之后就就进入到一个前馈网络，前馈网络由两个全连接层组成，主要用来做放缩，之后同样做残差连接，然后层归一化（Add &amp; Norm）。最后得到Encoder的输出，也被称为Encoder Hidden State。</p><img src="/blog/2023/12/19/2023/12/19/transformer/5.jpg" class=""><h2 id="解码器Decoder"><a href="#解码器Decoder" class="headerlink" title="解码器Decoder"></a>解码器Decoder</h2><p>解码器与编码器的层结构完全一样，只不过一个解码器有两个注意力层和一个前馈网络层。</p><p>第一个注意力是自己的注意力，第二个注意力是结合了Encoder Hidden State，即Encoder的输出作为</p><p>$K、V$，Decoder的第一个注意力层的输出作为$Q$，然后计算Attention分数。</p><p>最终Decoder模块的输出会经过全连接层和SoftMax来得到词表中每个词的概率值 ，选出概率最高的作为候选值。</p><h2 id="为什么可以实现并行训练？"><a href="#为什么可以实现并行训练？" class="headerlink" title="为什么可以实现并行训练？"></a>为什么可以实现并行训练？</h2><p>在实现细节里，还有很重要的一个部分就是掩码mask，Transformer通过掩码矩阵，使得模型在单步训练中只可以看到它应该看到的信息。在 mask 里，应该被忽略的我们会设成 1，应该被保留的会设成 0。如果 mask 相应位置上为 1，那么我们就给对应的 logits 加上一个超级小的负数， -1e-12， 这样，对应的 logits 也就变成了一个超级小的数。然后在计算 softmax 的时候，一个超级小的数的指数会无限接近与 0。也就是它对应的 attention 的权重就是 0 了。</p><img src="/blog/2023/12/19/2023/12/19/transformer/6.jpg" class=""><p>对于Encoder，有两个mask，第一个mask是为了屏蔽掉padding部分，在最开始做数据处理时，需要对文本对齐，比如我们规定文本tokenizer之后的id长度最大为50。另外一个是类似的上三角矩阵。第一个词只能注意到自己，第二个词可以注意到第一个词。第三个词可以注意到前两个词，依次类推。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. padding_mask</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_padding_mask</span>(<span class="hljs-params">batch_data</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param batch_data: [batch_size, seq_len]</span><br><span class="hljs-string">    :return: [batch_size, 1, 1, seq_len]</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    padding_mask = tf.cast(tf.math.equal(batch_data, <span class="hljs-number">0</span>), dtype=tf.float32)<br>    <span class="hljs-keyword">return</span> padding_mask[:, tf.newaxis, tf.newaxis, :]<br><br><br><br><span class="hljs-comment"># 2. look_ahead_mask(上三角矩阵，每个词只能注意到前面的没有预知未来的能力)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_look_ahead_mask</span>(<span class="hljs-params">size</span>):<br>    mask = <span class="hljs-number">1</span> - tf.linalg.band_part(tf.ones((size, size)), -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> mask <span class="hljs-comment"># (seq_len, seq_len)</span><br><br><br></code></pre></td></tr></table></figure><p>对于Decoder，先来说第二个注意力，在$Q*K^T$的运算后得logits，维度是$(…, seq_len_q, seq_len_k)$，logits需要加上Encoder的padding_mask，因为Decoder不需要花费精力去注意Encoder的padding部分。其次来看第一个注意力，第一个注意力与Encoder一样，训练过程中，每一个位置的词不应该看到后面位置的词，以及不应该花时间去注意padding的部分（对于训练而言）。</p><p>个人理解所谓的并行训练就是不需要等待输出结果，每一次Decoder的输入都会使用每个位置正确的词。在推理（预测）中，是不可以并行的，依然需要串行生成。</p><h2 id="学习率warm-up"><a href="#学习率warm-up" class="headerlink" title="学习率warm-up"></a>学习率warm-up</h2><p>这并不是开创性工作，但是这篇论文里用到了这个技术，那就来简单说一说，学习率预热是指在训练的初始阶段，学习率会从一个很小的值逐渐增加，根据设定的超参数决定在哪一步达到设置的值，之后保持不变，这种称之为warm-up_constant，还有很多变种其中包括先上升后下降。</p><img src="/blog/2023/12/19/2023/12/19/transformer/7.jpg" class=""><h2 id="机器翻译的评价指标——bleu"><a href="#机器翻译的评价指标——bleu" class="headerlink" title="机器翻译的评价指标——bleu"></a>机器翻译的评价指标——bleu</h2><p>论文里作者着眼NLP领域的机器翻译任务，采用bleu评价指标，在这里做一个介绍。</p><h3 id="什么是bleu？"><a href="#什么是bleu？" class="headerlink" title="什么是bleu？"></a>什么是bleu？</h3><p>BLEU（Bilingual Evaluation Understudy）是一种用于自动评估机器翻译质量的指标。它最初由Kishore Papineni等人在2002年提出，旨在解决人工评估翻译质量的主观性和费时性问题。BLEU的工作原理是将机器生成的翻译与人工参考翻译进行比较，并根据它们之间的相似性分配一个分数。我们可以通过微软的nltk框架来使用bleu指标。</p><p>BLEU的计算方式如下：</p><ol><li><p>对于翻译结果（机器生成的翻译），它会计算参考翻译（目标值）之间的 n-gram（连续的 n 个词或字符序列）匹配度。</p></li><li><p>对每个 n-gram 匹配，BLEU将其与候选翻译中的 n-gram 数量相比较，并采用一种修正的精确匹配度度量来计算得分。</p></li><li><p>然后，BLEU将各个 n-gram 匹配的得分合并，通过计算几何平均值来得出最终的 BLEU 分数。通常，BLEU 的分数在0到1之间，表示翻译的质量，越接近1表示越好。</p></li></ol><p><strong>公式如下：</strong><br>$$<br>bleu &#x3D; exp^{\sum weight*logP}*惩罚系数<br>$$</p><h3 id="什么是n-gram？"><a href="#什么是n-gram？" class="headerlink" title="什么是n-gram？"></a>什么是n-gram？</h3><pre><code class="hljs">与其解释抽象的公式，不如来一段代码实战理解，请看下面这段代码。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nltk.translate.bleu.score <span class="hljs-keyword">import</span> sentence_bleu<br>reference = [[<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;quick&#x27;</span>,<span class="hljs-string">&#x27;brown&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>,<span class="hljs-string">&#x27;jumped&#x27;</span>,<span class="hljs-string">&#x27;over&#x27;</span>,<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;lazy&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>]]<br>candidate = [<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;quick&#x27;</span>,<span class="hljs-string">&#x27;brown&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>,<span class="hljs-string">&#x27;jumped&#x27;</span>,<span class="hljs-string">&#x27;over&#x27;</span>,<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;lazy&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>]<br>score = sentence.bleu(reference, candidate)<br><span class="hljs-built_in">print</span>(score)<br><span class="hljs-comment"># out: 1.0</span><br><br><span class="hljs-comment"># 4-gram cumulative BLEU</span><br>candidate = [<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;fast&#x27;</span>,<span class="hljs-string">&#x27;brown&#x27;</span>,<span class="hljs-string">&#x27;fox&#x27;</span>,<span class="hljs-string">&#x27;jumped&#x27;</span>,<span class="hljs-string">&#x27;over&#x27;</span>,<span class="hljs-string">&#x27;the&#x27;</span>,<span class="hljs-string">&#x27;lazy&#x27;</span>,<span class="hljs-string">&#x27;dog&#x27;</span>]<br>score = sentence_bleu(reference, candidate, weights=(<span class="hljs-number">0.25</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.25</span>, <span class="hljs-number">0.25</span>))<br><span class="hljs-built_in">print</span>(score)<br><span class="hljs-comment"># out:0.75</span><br><br><span class="hljs-comment"># 手动计算</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>score = np.exp(<span class="hljs-number">0.25</span> * (np.log(<span class="hljs-number">8</span>/<span class="hljs-number">9</span>) + np.log(<span class="hljs-number">6</span>/<span class="hljs-number">8</span>) + np.log(<span class="hljs-number">5</span>/<span class="hljs-number">7</span>) + np.log(<span class="hljs-number">4</span>/<span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(score)<br><span class="hljs-comment"># out:0.75</span><br></code></pre></td></tr></table></figure><ul><li><p>过短惩罚系数，上例预测结果与目标结果长度一致，故为1。</p><ul><li>当预测结果比目标结果短时，过短惩罚系数就不为1了。</li></ul></li><li><p>在实际中，参考句可能不止一句，所以reference是二维。</p><ul><li>实际上，只要reference比candidate多一个维度就可以，candidate未必是一维的。</li></ul></li><li><p>n-gram实际上就是连续n个词一样。</p></li><li><p>weights是对每个gram赋予一个权重。</p></li><li><p>4-gram考查了1个，2个，3个，4个连续的词相同的情况。</p></li><li><p>P是连续n个词相同的概率。</p></li><li><p>bleu一定是一个0-1之间的值。</p><ul><li>P是0-1之间，logP是负数，乘以weights仍然是负数。</li><li>e的负数次幂在0-1之间。</li><li>过短惩罚系数是一个0-1之间的值。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是论文的主要贡献，开创性的Transformer架构成为了深度学习划时代的标志，像此后的GPT模型就是采用Decoder模块堆叠，他们的底层原理都来自于这一工作。谈到GPT3.5的成功，其实并不是谁都可以做的这么好，这是OpenAI在算法，工程和系统问题上的集大成之作。</p><p>在知乎等各种平台上，我们可以看到很多解读这篇论文的工作，作为一名在深度学习领域学习探索的学生，都应该认真学习这篇跨时代意义的论文。</p><p>“Don’t dwell on the past, the moments take  our breath away will actually measure the life.”</p>]]></content>
    
    
    <categories>
      
      <category>论文解读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最好的时光，回不去的高中</title>
    <link href="/blog/2023/12/18/2023/12/18/high_school/"/>
    <url>/blog/2023/12/18/2023/12/18/high_school/</url>
    
    <content type="html"><![CDATA[<p>2020年的高考是特殊的一年，那年高考的时间延期，体验了住校生活。我不想写太多的文字，放几张我们的照片吧。</p><div class="row justify-content-sm-center">    <div class="col mt-3 mt-md-0">        <img src="/blog/2023/12/18/2023/12/18/high_school/12.jpg" class="" title="高中">    </div></div><hr><div class="row justify-content-sm-center">    <div class="col-sm-8 mt-3 mt-md-0">        <img src="/blog/2023/12/18/2023/12/18/high_school/2.jpg" class="" title="聚会">    </div>    <div class="col-sm-4 mt-3 mt-md-0">        <img src="/blog/2023/12/18/2023/12/18/high_school/8.jpg" class="" title="聚会">    </div></div><hr><div class="row justify-content-sm-center">    <div class="col mt-3 mt-md-0">        <img src="/blog/2023/12/18/2023/12/18/high_school/13.jpg" class="" title="高中去向">    </div></div><hr><p>只有图片，没有文字，因为根本讲不完~~留白喽！</p>]]></content>
    
    
    <categories>
      
      <category>沉思录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Pages + HEXO学习之旅</title>
    <link href="/blog/2023/12/13/2023/12/13/use_hexo/"/>
    <url>/blog/2023/12/13/2023/12/13/use_hexo/</url>
    
    <content type="html"><![CDATA[<div style="text-align: center;">     <h1>HEXO学习之旅</h1> </div><h2 id="入局"><a href="#入局" class="headerlink" title="入局"></a>入局</h2><p>在最开始的时候，我计划采用购买国内服务器来搭建站点，不过一直都没有实施，懒狗石锤，就是想的多做得少。不过后来在知乎上看到了一个回答，结识了一位同学，他说可以使用GitHub Pages+HEXO来搭建，于是我就开始了我的GitHub Pages + HEXO之旅。</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>GitHub Pages是GitHub提供的一个静态网页托管服务，可以直接使用GitHub的仓库来托管网页，而且还可以绑定自己的域名，这样就可以使用自己的域名来访问网页了。</p><p>不过这一过程花费了我很长的时间，我第一次真正的下水实操配置域名，实现多域名解析，还有授权github actions等等，失败，失败，失败……，差一点放弃，不过最终还是成功了。这个过程很奇妙，我怀着很高的热情，每天在晚上抽出几个小时，有时我会干到很晚，经常实验室 就剩我一个人，学院门口的石碑晚上有灯，冷风吹在脸上的时候顿时清醒许多。</p><p>完成github pages以及github actions的学习，我的主页就初步建成了。</p><img src="/blog/2023/12/13/2023/12/13/use_hexo/photo.jpg" class="" title="教三"><h2 id="令人兴奋的开源项目"><a href="#令人兴奋的开源项目" class="headerlink" title="令人兴奋的开源项目"></a>令人兴奋的开源项目</h2><p>如果是我一个人手撕这个网站，那基本是凉的，说真的，我现在对开源项目有着崇高的敬意。还有那些热爱分享的年轻人，我的出发是一位网友引领的，我们从未相见过，只是因为在一篇帖子中请教问题，他回复了我。当我访问他的主页时，看到了他的博客，我之前一直有想法建一个属于自己的网页，于是乎我抱着尝试的心态询问了他。</p><p>我并没有想到他回复回我，但是他真的私信了我，更令我感激的是，后来我遇到了一些麻烦，他依然愿意为我解答。这种感觉很棒，我想起大二的linux课上，老师在黑板上写的一个单词”free“，他说，”这个单词不只是免费的意思，它代表着开源精神“。当然，开源并不等同于免费，但那时候起，我想我便爱上了开源。</p><h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。这个框架我从未接触过，于是我打开官方网站，开始按着教程一步一步实践。我在本地搭建了一个Hexo，然后在本地写了一篇文章，部署到了GitHub Pages上，这个过程并不顺利，我失败过很多次，不断地尝试，修改，还好，现在你们看到了，它就在这里。”What you see is what you get“.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我很享受这样的过程，痛苦、兴奋、尝试，这些属于我自己的时间，总有一天会闪闪发光。当我现在回头再看，发现这些流程是如此简单，可能真的是这样的，当你以身入局的时候，反而看不到宏观的信息。大一那个时候我学习高数花费了很长时间，现在在为新生辅导高数的过程中忽然收获到了在学习高数时从未有过的通透豁达之感。行文至此，该结束了，下面放一段最近很喜欢的文字吧。</p><p>"Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. These passions, like great winds, have blown me hither and thither, in a wayward course, over a great ocean of anguish, reaching to the very verge of despair."</p> <p style="text-align:right">--罗素</p>]]></content>
    
    
    <categories>
      
      <category>沉思录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>thoughts</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
